@inject IProductService ProductService
@using BagarBasse.Client.Services.ProductService
@using BagarBasse.Shared.Models
@using System.Reflection.Metadata

@if (Products == null || Products.Count == 0)
{
    <span>Loading Products...</span>
}
else
{
    <div class="container-fluid category-container p-2 @CategoryCss">
        <div class="container store-category my-5">
            <h1 class="fs-1 font-gatefold-demi text-center pb-5 category-title">
                @CategoryName
            </h1>
            <div class="store-items row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 g-3 align-items-stretch">

                @foreach (var product in Products)
                {
                    <div class="col store-item">
                        <a href="/product/@product.Id" class="text-reset text-decoration-none">
                        <div class="card border-0 h-100 align-items-top bg-transparent">
                            <div
                                class="card-img-top-wrapper rounded-4 d-inline-block overflow-hidden">
                                <img
                                    class="card-img-top rounded-4 store-item-image h-100 w-100"
                                    width="1194"
                                    height="800"
                                    aria-label="Product Image"
                                    src="@product.Image"
                                    alt="Card image cap"/>
                            </div>
                            <div class="card-body d-flex flex-column">
                                <h1 class="h5 card-title store-item-title font-gt-alpina">@product.Title</h1>
                                <p class="card-text store-item-desc flex-grow-1 font-ambit">@product.Description</p>
                            </div>
                        </div>
                        </a>
                    </div>
                }

            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string? CategoryUrl { get; set; } = string.Empty;

    [Parameter]
    public string CategoryCss { get; set; } = string.Empty;

    [Parameter]
    public string CategoryName { get; set; } = string.Empty;

    public List<Product> Products { get; set; } = new List<Product>();


    protected override async Task OnParametersSetAsync()
    {
        var response = await ProductService.GetProductsByCategoryAsync(CategoryUrl);

        if (response != null)
        {
            Products = response.Data;
            StateHasChanged();
        }
    }


    private string GetPriceText(Product product)
    {
        var variants = product.Variants;

        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }

        return $"Starting at ${variants.Min(v => v.Price)}";
    }

}