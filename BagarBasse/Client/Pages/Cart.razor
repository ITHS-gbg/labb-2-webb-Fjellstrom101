@page "/cart"
@using BagarBasse.Client.Services.CartService
@using BagarBasse.Shared.DTOs
@inject ICartService CartService

<PageTitle>Shopping Cart</PageTitle>
<h3> Shopping Cart</h3>
@if (_cartProducts == null || _cartProducts.Count == 0)
{
    <span>@_message</span>
}
else
{
    <div>
        @foreach (var product in _cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" alt="" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br />
                    <input type="number" value="@product.Quantity" class="form-control input-quantity" @onchange="((ChangeEventArgs e) => UpdateQuantity(e, product))" />
                    <button class="btn" @onclick="(()=>RemoveProductFromCart(product.ProductId, product.ProductTypeId))">Delete</button>
                </div>
                <div class="cart-product-price">@(product.Price * product.Quantity) kr</div>
            </div>
        }
        <div class="cart-product-price">
            Totalt: (@_cartProducts.Count): @_cartProducts.Sum(p => p.Price*p.Quantity) kr
        </div>
    </div>
}
@code {
    List<CartProductDto> _cartProducts = null;
    string _message = "Loading cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task LoadCart()
    {
        if ((await CartService.GetCartItemsAsync()).Count == 0)
        {
            _message = "Your cart is empty";
            _cartProducts = new List<CartProductDto>();
        }
        else
        {
            _cartProducts = await CartService.GetCartProductsAsync();
        }
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductDto product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
        {
            product.Quantity = 1;
        }
        await CartService.UpdateQuantity(product);
    }

}