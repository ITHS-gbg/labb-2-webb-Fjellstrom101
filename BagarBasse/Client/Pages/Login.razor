@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components
@using Blazored.LocalStorage
@using BagarBasse.Client.Services.CartService
@using BagarBasse.Shared.Models
@using BagarBasse.Client.Services.AuthService
@using System.Net
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService

<PageTitle>Logga in</PageTitle>
<div class="d-flex justify-content-center align-items-center login-form-wrapper my-5 flex-column font-ambit">
    <h3 class="fs-1 font-gatefold-demi text-center pb-5">Logga in</h3>
    <div class="login-form">
        <EditForm Model="user" OnValidSubmit="HandleLogin" class="w-100">
            <DataAnnotationsValidator/>
            <div class="mb-4">
                <div class="form-floating">
                    <InputText id="email" @bind-Value="user.Email" class="form-control" placeholder="name@example.com"></InputText>
                    <label for="email">Email</label>
                </div>
                <ValidationMessage For="@(() => user.Email)"/>
            </div>
            <div class="mb-4">
                <div class="form-floating">
                    <InputText id="password" @bind-Value="user.Password" type="password" class="form-control"></InputText>
                    <label for="email">Password</label>
                </div>
                <ValidationMessage For="@(() => user.Password)"/>
            </div>
            <button class="btn btn-pastel-pink w-100 fw-bold fs-5 p-2">Logga in</button>
        </EditForm>
        <div class="p-3 text-center text-danger">
            <span>@errorMessage</span>
        </div>
        <div class="mt-3 text-muted text-center">
            <span class="text-muted">Har du inget konto?</span>
            <a href="register">Registrera dig</a>
        </div>
    </div>
</div>

@code {
    private UserLogin user = new UserLogin();
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.IsSuccessStatusCode)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", await result.Content.ReadFromJsonAsync<string>());
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo(returnUrl);
        }
        else if(result.StatusCode == HttpStatusCode.Unauthorized)
        {
            errorMessage = "Fel användarnamn eller lösenord";
        }
    }

}