@page "/admin/product-types"
@inject IProductTypeService ProductTypeService
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using BagarBasse.Shared.Models
@using BagarBasse.Client.Services.ProductTypeService
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]

@foreach (var productType in ProductTypeService.ProductTypes)
{
    @if (productType.Editing)
    {

        <EditForm Model="_editingProductType" OnSubmit="UpdateProductType">
            <div class="row">
                <div class="col">
                    <InputText @bind-Value="_editingProductType.Name" class="form-control" />
                </div>
                <div class="col">
                    <button class="btn btn-primary" type="submit">
                        <i class="oi oi-cloud-upload"></i>
                    </button>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="row">
            <div class="col">
                @productType.Name
            </div>
            <div class="col">
                <button class="btn btn-primary" @onclick="() => EditProductType(productType)">
                    <i class="oi oi-pencil"></i>
                </button>
            </div>
        </div>
    }
}
<button class="btn btn-primary" @onclick="CreateNewProductType">
    <i class="oi oi-plus"></i> Add new product type
</button>
@code {
    ProductType _editingProductType = null;

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        ProductTypeService.OnChange += StateHasChanged;

    }

    private void EditProductType(ProductType productType)
    {
        productType.Editing = true;
        _editingProductType = productType;
    }

    private void CreateNewProductType()
    {
        _editingProductType = ProductTypeService.CreateNewProductType();
    }

    private async Task UpdateProductType()
    {
        if (_editingProductType.IsNew)
        {
            await ProductTypeService.AddProductType(_editingProductType);
        }
        else
        {
            await ProductTypeService.UpdateProductType(_editingProductType);
        }
        _editingProductType = new ProductType();
    }

    public void Dispose()
    {
        ProductTypeService.OnChange -= StateHasChanged;
    }

}